#for (a in c("d", "b"))
# index <- index + 1
#print(subj)
d_subj <- filter(rp2, PartID==subj)
subj_model <- lm(formula=prop_on ~ poly(trial,3,raw=TRUE), #complettion time(On/Off) ~trial
data = d_subj)
b_list4[subj] <- as.numeric(subj_model$coefficients[1]) # coefficient intercept
m_list4[subj] <- as.numeric(subj_model$coefficients[2]) # coefficient slope
poly_list[subj] <- as.numeric(subj_model$coefficients[3]) # coefficient quadratic term
}
#Creat a new Data Frame containing the slopes
rp_data <- data.frame(PartID=abcd_ids,slopeOn = m_list, slopeOff = m_list2, slopeProp_On = m_list4, quad_slopePropOn = poly_list)
rp_data$slopeProp_On_t<-as.numeric(rp_data$slopeProp_On)
d_rp<-merge(d,rp_data)
rp_data <- data.frame(PartID=abcd_ids,slopeOn = m_list, slopeOff = m_list2, slopeProp_On = m_list4, quad_slopePropOn = poly_list)
rp_data$slopeProp_On_t<-as.numeric(rp_data$slopeProp_On)
d_rp<-merge(d,rp_data)
hist(d_rp$slopeProp_On_t)
hist(d_rp$quad_slopePropOn)
for (subj in abcd_ids) { #d_export is my list of subject
#for (a in c("d", "b"))
# index <- index + 1
#print(subj)
d_subj <- filter(rp2, PartID==subj)
subj_model <- lm(formula=prop_on ~ trial, #complettion time(On/Off) ~trial
data = d_subj)
b_list4[subj] <- as.numeric(subj_model$coefficients[1]) # coefficient intercept
m_list4[subj] <- as.numeric(subj_model$coefficients[2]) # coefficient slope
}
rp_data <- data.frame(PartID=abcd_ids,slopeOn = m_list, slopeOff = m_list2, slopeProp_On = m_list4, quad_slopePropOn = poly_list)
rp_data$slopeProp_On<-as.numeric(rp_data$slopeProp_On)
d_rp<-merge(d,rp_data)
hist(d_rp$slopeProp_On)
rp2$trial<-as.integer(rp2$trial)
rpPlot<-dplyr::summarise(group_by(rp2,Subgroup,trial), n = n(),
mean=mean(prop_on,na.rm = T), sd=sd(On/(On+Off),na.rm = T),se = sd/sqrt(n))
ggplot(data = rpPlot, aes(x=trial, y=mean, color = Subgroup))+
geom_line() +geom_point()  +
scale_color_manual(values=c('red','blue'))+
geom_errorbar(aes(ymin=mean-se,ymax=mean+se),
width=.1,  size=0.5)+
scale_x_continuous(breaks=seq(2,16,1))+
#scale_y_continuous(limits = c(0.2, 0.5))+
theme(
axis.title = element_text(family = "Trebuchet MS", size = 20),
legend.key.size = unit(1, "cm"),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15))  +
labs(x = "Trials", y = "Proportion On (secs)") +
theme(panel.background = element_rect(fill = "white", colour = "grey50")) +
theme(axis.line = element_line(arrow = arrow(angle = 15, length = unit(.15,"inches"),type = "closed")))
ggplot(rp2, aes(trial, prop_on, color=Subgroup))+
stat_summary(fun.data=mean_se, geom="pointrange")+
stat_summary(aes(y=fitted_prop_on),fun.y=mean, geom="line")+
scale_color_manual(values=c('red','blue'))+
scale_x_continuous(breaks=seq(2,16,1))+
theme(
axis.title = element_text(family = "Trebuchet MS", size = 20),
legend.key.size = unit(1, "cm"),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15))  +
labs(x = "Trials", y = "Proportion On (secs)") +
theme(panel.background = element_rect(fill = "white", colour = "grey50")) +
theme(axis.line = element_line(arrow = arrow(angle = 15, length = unit(.15,"inches"),type = "closed")))
ggplot(rp2, aes(trial, prop_on, color=Subgroup))+
stat_summary(fun.data=mean_se, geom="pointrange")+
stat_summary(aes(y=fitted_prop_on),fun.y=mean, geom="line")+
scale_color_manual(values=c('red','blue'))+
scale_x_continuous(breaks=seq(2,16,1))+
theme(
axis.title = element_text(family = "Trebuchet MS", size = 20),
legend.key.size = unit(1, "cm"),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15))  +
labs(x = "Trials", y = "Proportion On (secs)") +
theme(panel.background = element_rect(fill = "white", colour = "grey50")) +
theme(axis.line = element_line(arrow = arrow(angle = 15, length = unit(.15,"inches"),type = "closed")))
m2<-lm(slopeProp_On_t~background_age+background_sex+Subgroup, data=d_rp)
ggplot(rp2, aes(trial, prop_on, color=Subgroup))+
stat_summary(fun.data=mean_se, geom="pointrange")+
stat_summary(aes(y=fitted_prop_on),fun.y=mean, geom="line")+
scale_color_manual(values=c('red','blue'))+
scale_x_continuous(breaks=seq(2,16,1))+
theme(
axis.title = element_text(family = "Trebuchet MS", size = 20),
legend.key.size = unit(1, "cm"),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15))  +
labs(x = "Trials", y = "Proportion On (secs)") +
theme(panel.background = element_rect(fill = "white", colour = "grey50")) +
theme(axis.line = element_line(arrow = arrow(angle = 15, length = unit(.15,"inches"),type = "closed")))
m2<-lm(slopeProp_On~background_age+background_sex+Subgroup, data=d_rp)
anova(m2)
lsmeans(m2, list(pairwise ~ Subgroup), adjust = "tukey")
plot_rp_slope<-d_rp%>%dplyr::select('PartID',"Subgroup","slopeProp_On_t")
plot_rp_slope<-d_rp%>%dplyr::select('PartID',"Subgroup","slopeProp_On")
plot_rp_slope<-na.omit(plot_rp_slope)
rp_slope = plot_rp_slope %>%
dplyr::group_by(PartID, Subgroup) %>%
dplyr::summarise(mean = mean(slopeProp_On, na.rm = T))
multi.group3 <-
rp_slope %>%
dabestr::dabest(Subgroup,mean,
idx = list(c("TYP",'DD')),
paired = FALSE)
plot(multi.group3, palette=c("blue","red"),rawplot.ylabel = "RP Prop On Slope")
mt <- NULL
mt <- data.frame('PartID'= character(),'Subgroup' = character(),'Type' = character(),'trial' = double(),
'time' = double(),'error' = double(),stringsAsFactors=FALSE)
for (i in 1:nrow(PL)) {
if (PL[i,22] == ""){ #if null go to next line
next()
}
for(k in 22:31){
print(paste(k,PL[i,k]))
time <- as.numeric(trimws(strsplit(PL[i,k],';')[[1]][1]))
error <- as.numeric(trimws(strsplit(PL[i,k],';')[[1]][2]))
if (nrow(mt) == 0) {
mt[1,] <- c(PL[i,1],PL[i,2],'mt',k-21,time,error)
}
else {
mt[nrow(mt) + 1,] <- c(PL[i,1],PL[i,2],'mt',k-21,time,error)
}
}
}
mt$time <- as.numeric(mt$time)
mt$error <- as.numeric(mt$error)
str(mt$trial)
mt$trial <- as.numeric(mt$trial)
## Extract and organize
mt <- NULL
mt <- data.frame('PartID'= character(),'Subgroup' = character(),'Type' = character(),'trial' = double(),
'time' = double(),'error' = double(),stringsAsFactors=FALSE)
for (i in 1:nrow(PL)) {
if (PL[i,22] == ""){ #if null go to next line
next()
}
for(k in 22:31){
print(paste(k,PL[i,k]))
time <- as.numeric(trimws(strsplit(PL[i,k],';')[[1]][1]))
error <- as.numeric(trimws(strsplit(PL[i,k],';')[[1]][2]))
if (nrow(mt) == 0) {
mt[1,] <- c(PL[i,1],PL[i,2],'mt',k-21,time,error)
}
else {
mt[nrow(mt) + 1,] <- c(PL[i,1],PL[i,2],'mt',k-21,time,error)
}
}
}
mt$time <- as.numeric(mt$time)
mt$error <- as.numeric(mt$error)
mt$trial <- as.numeric(mt$trial)
# Check # of trials per each subject
data_tmp4check <- aggregate(error ~ PartID * Subgroup, FUN=NROW, data = mt )
unique(data_tmp4check[data_tmp4check$trial != 10,])
View(data_tmp4check)
length(unique(d$PartID))
data_tmp4check[data_tmp4check$trial !=10,1]
# Outliers
##NOT SURE IF SHOULD EXCLUDE OR NOT
histogram(mt$error)
histogram(mt$time)
summary(mt)
mt2<-mt%>%filter(time<200) #excluded 2
mt2<-mt #place holder while deciding on outliers
length(unique(mt$PartID))
length(unique(mt2$PartID))
histogram(mt2$error)
histogram(mt2$time)
# Check # of trials per each subject
data_tmp4check <- aggregate(error ~ PartID * Subgroup, FUN=NROW, data = mt )
unique(data_tmp4check[data_tmp4check$trial != 10,])
#View(data_tmp4check)
length(unique(d$PartID))
data_tmp4check[data_tmp4check$trial !=10,1]
# Outliers
##NOT SURE IF SHOULD EXCLUDE OR NOT
histogram(mt$error)
histogram(mt$time)
summary(mt)
mt2<-mt%>%filter(time<200) #excluded 2
mt2<-mt #place holder while deciding on outliers
length(unique(mt$PartID))
length(unique(mt2$PartID))
histogram(mt2$error)
histogram(mt2$time)
histogram(mt2$time)
histogram(mt2$error)
mt2<-mt%>%filter(time<200) #excluded 2
mt2<-mt #place holder while deciding on outliers
histogram(mt2$error)
range(mt$error)
range(as.numeric(mt$error))
range(mt$error,na.omit=TRUE)
mt$error
range(mt$error,na.omit=TRUE)
str(mt$trial)
str(mt$time)
str(mt$error)
mt$error
mt2<-mt%>%filter(time<200) #excluded 2
histogram(mt2$error)
histogram(mt2$time)
m3<-lm(time~Subgroup*trial,
data=mt2)
anova(m3) #trial+
summary(m3) #trial+subgroup are significant
lsmeans(m3, list(pairwise ~ Subgroup|trial), adjust = "tukey")
m4<-lm(error~Subgroup*as.factor(trial),
data=mt2)
anova(m4)
lsmeans(m4, list(pairwise ~ Subgroup|trial), adjust = "tukey")
m3<-lm(time~Subgroup*as.factor(trial),
data=mt2)
anova(m3) #trial+subgroup are significant
lsmeans(m3, list(pairwise ~ Subgroup|trial), adjust = "tukey")
m4<-lm(error~Subgroup*trial,
data=mt2)
anova(m4)
lsmeans(m4, list(pairwise ~ Subgroup|trial), adjust = "tukey")
lmerm2<-lmer(error~Subgroup*trial+(1+trial|PartID),
data=mt2)
summary(lmerm2)
mt2$time <- as.numeric(mt2$time)
mt2$error <- as.numeric(mt2$error)
mt2$trial <- as.numeric(mt2$trial)
mtTPlot<-dplyr::summarise(group_by(mt2,Subgroup,trial), n = n(),
meanT=mean(time,na.rm = T), sd=sd(time,na.rm = T),se = sd/sqrt(n))
mtEPlot<-dplyr::summarise(group_by(mt2,Subgroup,trial), n = n(),
meanE=mean(error,na.rm = T), sd=sd(error,na.rm = T),se = sd/sqrt(n))
ggplot(data = mtTPlot, aes(x=trial, y=meanT, color = Subgroup))+
geom_line() +geom_point()  +
scale_color_manual(values=c('red','blue'))+
geom_errorbar(aes(ymin=meanT-se,ymax=meanT+se),
width=.1,  size=0.5)+
scale_x_continuous(breaks=seq(0,10,1))+
#scale_y_continuous(limits = c(0.2, 0.5))+
theme(
axis.title = element_text(family = "Trebuchet MS", size = 20),
legend.key.size = unit(1, "cm"),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15))  +
labs(x = "Trials", y = "Completion Time (secs)") +
theme(panel.background = element_rect(fill = "white", colour = "grey50")) +
theme(axis.line = element_line(arrow = arrow(angle = 15, length = unit(.15,"inches"),type = "closed")))
ggplot(data = mtEPlot, aes(x=trial, y=meanE, color = Subgroup))+
geom_line() +geom_point()  +
scale_color_manual(values=c('red','blue'))+
geom_errorbar(aes(ymin=meanE-se,ymax=meanE+se),
width=.1,  size=0.5)+
scale_x_continuous(breaks=seq(0,10,1))+
#scale_y_continuous(limits = c(0.2, 0.5))+
theme(
axis.title = element_text(family = "Trebuchet MS", size = 20),
legend.key.size = unit(1, "cm"),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15))  +
labs(x = "Trials", y = "Errors") +
theme(panel.background = element_rect(fill = "white", colour = "grey50")) +
theme(axis.line = element_line(arrow = arrow(angle = 15, length = unit(.15,"inches"),type = "closed")))
temp = complete.cases(mt2)
mt2 = mt2[temp,]
s <- poly(unique(mt2$trial),2)
mt2[,paste("otrial",1:2,sep="")] <-s[mt2$trial,1:2]
summary(mt2)
m.base <- lmer(time ~(otrial1+otrial2)+(otrial1+otrial2 | PartID),data=mt2,REML=FALSE)
m.0 <- lmer(time ~(otrial1+otrial2)+ Subgroup + (otrial1+otrial2 | PartID),data=mt2,REML=FALSE)
m.1 <- lmer(time ~(otrial1+otrial2)*Subgroup + (otrial1+otrial2 | PartID),data=mt2,REML=FALSE)
anova(m.base,m.0,m.1)
summary(m.1)
mt2$fitted_time=fitted(m.1)
ggplot(mt2, aes(trial, time, color=Subgroup))+
stat_summary(fun.data=mean_se, geom="pointrange")+
stat_summary(aes(y=fitted_time), geom="line")+
scale_color_manual(values=c('red','blue'))+
scale_x_continuous(breaks=seq(2,16,1))+
theme(
axis.title = element_text(family = "Trebuchet MS", size = 20),
legend.key.size = unit(1, "cm"),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15))  +
labs(x = "Trials", y = "Completion Time (secs)") +
theme(panel.background = element_rect(fill = "white", colour = "grey50")) +
theme(axis.line = element_line(arrow = arrow(angle = 15, length = unit(.15,"inches"),type = "closed")))
ggplot(mt2, aes(trial, error, color=Subgroup))+
stat_summary(fun.data=mean_se, geom="pointrange")+
stat_summary(aes(y=fitted_error), geom="line")+
scale_color_manual(values=c('red','blue'))+
scale_x_continuous(breaks=seq(2,16,1))+
theme(
axis.title = element_text(family = "Trebuchet MS", size = 20),
legend.key.size = unit(1, "cm"),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15))  +
labs(x = "Trials", y = "Error") +
theme(panel.background = element_rect(fill = "white", colour = "grey50")) +
theme(axis.line = element_line(arrow = arrow(angle = 15, length = unit(.15,"inches"),type = "closed")))
#Error slopes
d_glm_fit_list <- vector(mode = "list", length = nrow(rp)*2)
index <- 0
abcd_ids=unique(mt2$PartID)
b_list5=c()
m_list5 = c()
for (subj in abcd_ids) {
# print(subj)
d_subj <- filter(mt, PartID==subj)
subj_model <- glm(error ~ trial, #errors
data = d_subj)
b_list5[subj] <- as.numeric(subj_model$coefficients[1]) # coefficient intercept
m_list5[subj] <- as.numeric(subj_model$coefficients[2]) # coefficient slope
}
d_glm_fit_list <- vector(mode = "list", length = nrow(rp)*2)
index <- 0
abcd_ids=unique(mt2$PartID)
b_list7=c()
m_list7 = c()
for (subj in abcd_ids) { #d_export is my list of subject
#print(subj)
d_subj <- dplyr::filter(mt2, PartID==subj)
subj_model <- lm(formula=time ~ poly(trial,4,raw=TRUE), #completion time
data = d_subj)
b_list7[subj] <- as.numeric(subj_model$coefficients[1]) # coefficient intercept
m_list7[subj] <- as.numeric(subj_model$coefficients[2]) # coefficient slope
}
#new data frame containing the mirror slopes
mt_data <- data.frame(PartID=abcd_ids,slope_me = m_list5, slope_mt = m_list7)
mt_data$slope_mt<-as.numeric(mt_data$slope_mt)
mt_data=mt_data%>%dplyr::filter(slope_me>-300)
mt_data$slope_me<-log(abs(mt_data$slope_me)) #transform slope
hist(mt_data$slope_me)
d2<-merge(d, mt_data)
d_glm_fit_list <- vector(mode = "list", length = nrow(rp)*2)
index <- 0
abcd_ids=unique(mt2$PartID)
b_list7=c()
m_list7 = c()
for (subj in abcd_ids) { #d_export is my list of subject
#print(subj)
d_subj <- dplyr::filter(mt, PartID==subj)
subj_model <- glm(time ~ trial, #complettion time(On/Off) ~trial
data = d_subj,na.action = 'na.omit')
b_list7[subj] <- as.numeric(subj_model$coefficients[1]) # coefficient intercept
m_list7[subj] <- as.numeric(subj_model$coefficients[2]) # coefficient slope
}
#new data frame containing the mirror slopes
mt_data <- data.frame(PartID=abcd_ids,slope_me = m_list5, slope_mt = m_list7)
mt_data<-as.data.frame(mt_data)
mt_data$slope_me_t<-abs(as.numeric(mt_data$slope_me))
mt_data$slope_me_t<-log10(mt_data$slope_me_t+1) #transform slope
#mt_data<-mt_data%>%filter(slope_me_t!="-Inf") #transform slope
mt_data$slope_mt_t<-abs(as.numeric(mt_data$slope_mt))
mt_data$slope_mt_t<-log10(mt_data$slope_mt_t) #transform slope
d_3 <- d %>%
select("PartID","Subgroup", "background_age","background_sex")
d_mt <- left_join(mt_data, d_3, by = "PartID")
d2<-merge(d_rp,d_mt)
#t.test(d_mt$slope_mt_t~d_mt$Subgroup)
#t.test(d_mt$slope_me_t~d_mt$Subgroup)
m3<-lm(slope_mt_t~background_age+background_sex+Subgroup, data=d_mt,na.action = na.exclude)
anova(m3)
m4<-lm(slope_me_t~background_age+background_sex+Subgroup, data=d_mt,na.action = na.exclude)
anova(m4) #sig group difference
lsmeans(m4, list(pairwise ~ Subgroup), adjust = "tukey")
lsmeans(m4, list(pairwise ~ Subgroup), adjust = "tukey")
mt_slope<-d2%>%dplyr::select("PartID","Subgroup","slope_mt_t")
mt_slope = mt_slope %>%
dplyr::group_by(PartID, Subgroup) %>%
dplyr::summarise(mean = mean(slope_mt_t, na.rm = T))
multi.group_mt <-
mt_slope %>%
dabestr::dabest(Subgroup,mean,
idx = list(c("TYP","DD")),
paired = FALSE
)
plot(multi.group_mt, palette=c("blue","red"),rawplot.ylabel = "MT Time Slope")
me_slope<-d2%>%dplyr::select("PartID","Subgroup","slope_me_t")
me_slope = me_slope %>%
dplyr::group_by(PartID, Subgroup) %>%
dplyr::summarise(mean = mean(slope_me_t, na.rm = T))
multi.group_me <-
me_slope %>%
dabestr::dabest(Subgroup,mean,
idx = list(c("TYP","DD")),
paired = FALSE
)
plot(multi.group_me, palette=c("blue","red"),rawplot.ylabel = "MT Time Slope")
names(SL)[names(SL) == "subj"] <- "PartID"
d_all<-merge(d,rp_data,all = TRUE)
d_all <-merge(d_all,mt_data,all=TRUE)
d_all <-merge(d_all,SL,all=TRUE)
table(SL$group)
m5<-lm(aud_slope_scale~background_age+background_sex+Subgroup, data=d_all,na.action = na.exclude)
anova(m5) #sig group difference
asl_slope<-d_all%>%dplyr::select("PartID","Subgroup","aud_slope_scale")
asl_slope<-na.omit(asl_slope)
asl_slope2 = asl_slope %>%
dplyr::group_by(PartID, Subgroup) %>%
dplyr::summarise(mean = mean(aud_slope_scale, na.rm = T))
multi.group_asl <-
asl_slope2 %>%
dabestr::dabest(Subgroup,mean,
idx = list(c("TYP","DD")),
paired = FALSE
)
plot(multi.group_asl, palette=c("blue","red"),rawplot.ylabel = "ASL Time Slope")
m6<-lm(vis_slope_scale~background_age+background_sex+Subgroup, data=d_all,na.action = na.exclude)
anova(m6) #sig group difference
vsl_slope<-d_all%>%dplyr::select("PartID","Subgroup","vis_slope_scale")
vsl_slope<-na.omit(vsl_slope)
vsl_slope2 = vsl_slope %>%
dplyr::group_by(PartID, Subgroup) %>%
dplyr::summarise(mean = mean(vis_slope_scale, na.rm = T))
multi.group_vsl <-
vsl_slope2 %>%
dabestr::dabest(Subgroup,mean,
idx = list(c("TYP","DD")),
paired = FALSE
)
plot(multi.group_vsl, palette=c("blue","red"),rawplot.ylabel = "VSL Slope")
m6<-lm(aud_fam_rt~background_age+background_sex+Subgroup, data=d_all,na.action = na.exclude)
anova(m6)
m7<-lm(vis_fam_rt~background_age+background_sex+Subgroup, data=d_all,na.action = na.exclude)
anova(m7)
source("corstars_function.R")
d_all_dys = subset(d_all,Subgroup == "DD")
d_all_typ = subset(d_all,Subgroup == "TYP")
task_data<-d_all%>%select(kbit_ss_2,gort_ori_ss_2,ctopp_nonword_raw_2,ctopp_elision_raw_2,ctopp_blending_raw_2,wais_dsb_ss_2,slopeProp_On,slope_mt_t,slope_me_t,vis_slope_scale,aud_slope_scale,quicksin_snr_loss_2)
task_data_dys<-d_all_dys%>%select(wrmt_id_ss_2,wrmt_wa_ss_2,towre_sw_ss_2,towre_pde_ss_2, slopeProp_On,quad_slopePropOn, slope_mt,slope_me,aud_acc,vis_acc,aud_slope_scale,vis_slope_scale)
task_data_typ<-d_all_typ%>%select(wrmt_id_ss_2,wrmt_wa_ss_2,towre_sw_ss_2,towre_pde_ss_2, slopeProp_On,quad_slopePropOn, slope_mt,slope_me,aud_acc,vis_acc,aud_slope_scale,vis_slope_scale)
corstars(task_data,method="pearson")#you need to run the function first
corstars(task_data,method="pearson")#you need to run the function first
corstars(task_data_dys,method="pearson")#you need to run the function first
corstars(task_data_typ,method="pearson")#you need to run the function first
d_glm_fit_list <- vector(mode = "list", length = nrow(rp)*2)
index <- 0
abcd_ids=unique(rp2$PartID)
b_list=c()
m_list = c()
for (subj in abcd_ids) { #d_export is my list of subject
#for (a in c("d", "b"))
# index <- index + 1
#print(subj)
d_subj <- filter(rp2, PartID==subj)
subj_model <- lm(formula=On ~ trial, #complettion time(On/Off) ~trial
data = d_subj)
b_list[subj] <- as.numeric(subj_model$coefficients[1]) # coefficient intercept
m_list[subj] <- as.numeric(subj_model$coefficients[2]) # coefficient slope
}
#Off Slopes
d_glm_fit_list <- vector(mode = "list", length = nrow(rp)*2)
index <- 0
d_glm_fit_list <- vector(mode = "list", length = nrow(rp)*2)
index <- 0
abcd_ids=unique(rp2$PartID)
b_list=c()
m_list = c()
for (subj in abcd_ids) { #d_export is my list of subject
#for (a in c("d", "b"))
# index <- index + 1
#print(subj)
d_subj <- filter(rp2, PartID==subj)
subj_model <- lm(formula=On ~ trial, #complettion time(On/Off) ~trial
data = d_subj)
b_list[subj] <- as.numeric(subj_model$coefficients[1]) # coefficient intercept
m_list[subj] <- as.numeric(subj_model$coefficients[2]) # coefficient slope
}
#Off Slopes
d_glm_fit_list <- vector(mode = "list", length = nrow(rp)*2)
index <- 0
abcd_ids=unique(rp$PartID)
b_list2=c()
m_list2 = c()
for (subj in abcd_ids) { #d_export is my list of subject
#for (a in c("d", "b"))
# index <- index + 1
#print(subj)
d_subj <- filter(rp2, PartID==subj)
subj_model <- lm(formula=Off ~ poly(trial,3,raw=TRUE), #complettion time(On/Off) ~trial
data = d_subj)
b_list2[subj] <- as.numeric(subj_model$coefficients[1]) # coefficient intercept
m_list2[subj] <- as.numeric(subj_model$coefficients[2]) # coefficient slope
}
#PropOn Slopes
d_glm_fit_list <- vector(mode = "list", length = nrow(rp)*2)
index <- 0
abcd_ids=unique(rp$PartID)
b_list4=c()
m_list4 = c()
poly_list = c()
for (subj in abcd_ids) { #d_export is my list of subject
#for (a in c("d", "b"))
# index <- index + 1
#print(subj)
d_subj <- filter(rp2, PartID==subj)
subj_model <- lm(formula=prop_on ~ trial, #complettion time(On/Off) ~trial
data = d_subj)
b_list4[subj] <- as.numeric(subj_model$coefficients[1]) # coefficient intercept
m_list4[subj] <- as.numeric(subj_model$coefficients[2]) # coefficient slope
}
#Creat a new Data Frame containing the slopes
rp_data <- data.frame(PartID=abcd_ids,slopeOn = m_list, slopeOff = m_list2, slopeProp_On = m_list4, quad_slopePropOn = poly_list)
rp_data <- data.frame(PartID=abcd_ids,slopeOn = m_list, slopeOff = m_list2, slopeProp_On = m_list4)
rp_data$slopeProp_On<-as.numeric(rp_data$slopeProp_On)
d_rp<-merge(d,rp_data)
hist(d_rp$slopeProp_On)
source("corstars_function.R")
d_all_dys = subset(d_all,Subgroup == "DD")
d_all_typ = subset(d_all,Subgroup == "TYP")
task_data<-d_all%>%select(kbit_ss_2,gort_ori_ss_2,ctopp_nonword_raw_2,ctopp_elision_raw_2,ctopp_blending_raw_2,wais_dsb_ss_2,slopeProp_On,slope_mt_t,slope_me_t,vis_slope_scale,aud_slope_scale,quicksin_snr_loss_2)
task_data_dys<-d_all_dys%>%select(wrmt_id_ss_2,wrmt_wa_ss_2,towre_sw_ss_2,towre_pde_ss_2, slopeProp_On,quad_slopePropOn, slope_mt,slope_me,aud_acc,vis_acc,aud_slope_scale,vis_slope_scale)
task_data_typ<-d_all_typ%>%select(wrmt_id_ss_2,wrmt_wa_ss_2,towre_sw_ss_2,towre_pde_ss_2, slopeProp_On,quad_slopePropOn, slope_mt,slope_me,aud_acc,vis_acc,aud_slope_scale,vis_slope_scale)
corstars(task_data,method="pearson")#you need to run the function first
